#!/usr/bin/env node

import { ethers } from "ethers";
import { readFileSync } from "fs";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function linkOffersOnly() {
    console.log("üîó LIAISON UNIQUEMENT DE L'EXTENSION OFFERS...");
    console.log("=" .repeat(60));

    // Configuration
    const PRIVATE_KEY = process.env.PRIVATE_KEY;
    if (!PRIVATE_KEY) {
        console.error("‚ùå PRIVATE_KEY non d√©finie dans l'environnement");
        console.log("üí° Utilisez: export PRIVATE_KEY=votre_cl√©_priv√©e");
        process.exit(1);
    }

    const rpcUrl = process.env.HYPEREVM_RPC_URL || "https://999.rpc.thirdweb.com";
    const provider = new ethers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

    console.log("üì± D√©ployeur:", wallet.address);
    console.log("üîó RPC:", rpcUrl);

    try {
        // V√©rifier la connexion
        const network = await provider.getNetwork();
        console.log("üåê R√©seau:", network.name || "HyperEVM");
        console.log("üîó Chain ID:", network.chainId);

        // V√©rifier le solde
        const balance = await provider.getBalance(wallet.address);
        console.log("üí∞ Solde:", ethers.formatEther(balance), "HYPE");

        if (balance < ethers.parseEther("0.00001")) {
            console.error("‚ùå Solde insuffisant pour les transactions");
            process.exit(1);
        }

        // Adresses des contrats
        const marketplaceAddress = "0xeEf91cD030F98Ce0330F050A446e3E883604D755";
        const offersAddress = "0x5eF000e2a094970B59d089aE01649B3B5908f9c8";

        console.log("\nüìç Adresses des Contrats:");
        console.log("üè¢ MarketplaceV3:", marketplaceAddress);
        console.log("üéØ Offers:", offersAddress);
        console.log("üè™ DirectListingsExtension: (√† r√©parer plus tard)");

        // Charger les ABIs
        console.log("\nüìã Chargement des ABIs...");
        
        const MarketplaceV3ABI = JSON.parse(
            readFileSync(join(__dirname, "./artifacts_forge/MarketplaceV3.sol/MarketplaceV3.json"), "utf8")
        ).abi;

        const OffersABI = JSON.parse(
            readFileSync(join(__dirname, "./artifacts_forge/Offers.sol/Offers.json"), "utf8")
        ).abi;

        // Cr√©er les instances des contrats
        const marketplace = new ethers.Contract(marketplaceAddress, MarketplaceV3ABI, wallet);
        const offers = new ethers.Contract(offersAddress, OffersABI, wallet);

        // ===== PHASE 1: V√âRIFICATION DES CONTRATS =====
        console.log("\nüîç PHASE 1: V√âRIFICATION DES CONTRATS");
        console.log("=" .repeat(50));

        // V√©rifier MarketplaceV3
        try {
            const marketplaceAdmin = await marketplace.DEFAULT_ADMIN_ROLE();
            console.log("‚úÖ MarketplaceV3 v√©rifi√©");
        } catch (error) {
            console.error("‚ùå Erreur avec MarketplaceV3:", error.message);
            process.exit(1);
        }

        // V√©rifier Offers
        try {
            const offersAdmin = await offers.DEFAULT_ADMIN_ROLE();
            console.log("‚úÖ Offers v√©rifi√©");
        } catch (error) {
            console.error("‚ùå Erreur avec Offers:", error.message);
            process.exit(1);
        }

        // ===== PHASE 2: V√âRIFICATION DES PERMISSIONS =====
        console.log("\nüîê PHASE 2: V√âRIFICATION DES PERMISSIONS");
        console.log("=" .repeat(50));

        const EXTENSION_ROLE = await marketplace.EXTENSION_ROLE();
        const hasExtensionRole = await marketplace.hasRole(EXTENSION_ROLE, wallet.address);

        if (!hasExtensionRole) {
            console.error("‚ùå Vous n'avez pas le r√¥le EXTENSION_ROLE sur la marketplace");
            console.log("üí° Contactez l'administrateur de la marketplace");
            process.exit(1);
        }

        console.log("‚úÖ Permissions v√©rifi√©es (EXTENSION_ROLE)");

        // ===== PHASE 3: AJOUT DE L'EXTENSION OFFERS =====
        console.log("\nüîó PHASE 3: AJOUT DE L'EXTENSION OFFERS");
        console.log("=" .repeat(50));

        const OFFERS_ID = ethers.keccak256(ethers.toUtf8Bytes("OFFERS"));
        console.log("üÜî ID de l'extension Offers:", OFFERS_ID);

        // V√©rifier si l'extension est d√©j√† enregistr√©e
        try {
            const existingOffers = await marketplace.getExtension(OFFERS_ID);
            if (existingOffers.extension !== ethers.ZeroAddress) {
                console.log("‚ö†Ô∏è  Offers d√©j√† enregistr√©e");
                console.log("   Adresse:", existingOffers.extension);
                console.log("   Activ√©e:", existingOffers.enabled);
                console.log("   Nom:", existingOffers.name);
            } else {
                console.log("‚ÑπÔ∏è  Offers non enregistr√©e, ajout en cours...");
            }
        } catch (error) {
            console.log("‚ÑπÔ∏è  Offers non enregistr√©e, ajout en cours...");
        }

        // Ajouter l'extension Offers
        console.log("\nüéØ Enregistrement de l'extension Offers...");
        try {
            const tx = await marketplace.addExtension(
                OFFERS_ID,
                offersAddress,
                "Offers Extension"
            );
            
            console.log("‚è≥ Transaction envoy√©e:", tx.hash);
            const receipt = await tx.wait();
            console.log("‚úÖ Extension Offers ajout√©e avec succ√®s !");
            console.log("   Block:", receipt.blockNumber);
            console.log("   Gas utilis√©:", receipt.gasUsed.toString());
            
        } catch (error) {
            console.error("‚ùå Erreur lors de l'enregistrement de Offers:", error.message);
            process.exit(1);
        }

        // ===== PHASE 4: V√âRIFICATION FINALE =====
        console.log("\n‚úÖ PHASE 4: V√âRIFICATION FINALE");
        console.log("=" .repeat(50));

        try {
            const offersExt = await marketplace.getExtension(OFFERS_ID);
            console.log("‚úÖ Extension Offers v√©rifi√©e:");
            console.log("   Adresse:", offersExt.extension);
            console.log("   Activ√©e:", offersExt.enabled);
            console.log("   Nom:", offersExt.name);
        } catch (error) {
            console.error("‚ùå Erreur lors de la v√©rification de Offers:", error.message);
        }

        // Lister toutes les extensions
        console.log("\nüìã Extensions enregistr√©es:");
        try {
            const allExtensionIds = await marketplace.getAllExtensionIds();
            for (const extensionId of allExtensionIds) {
                const extension = await marketplace.getExtension(extensionId);
                console.log(`   - ${extension.name}: ${extension.extension} (${extension.enabled ? 'Activ√©e' : 'D√©sactiv√©e'})`);
            }
        } catch (error) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration des extensions:", error.message);
        }

        // ===== R√âSUM√â FINAL =====
        console.log("\nüéâ LIAISON PARTIELLE R√âUSSIE !");
        console.log("=" .repeat(50));
        
        console.log("‚úÖ Actions r√©ussies:");
        console.log("   1. Extension Offers ajout√©e √† la marketplace");
        console.log("   2. V√©rification des liaisons r√©ussie");
        
        console.log("\nüìç √âtat actuel:");
        console.log("   üè¢ MarketplaceV3:", marketplaceAddress);
        console.log("   üéØ Offers:", offersAddress + " ‚úÖ LI√â");
        console.log("   üè™ DirectListingsExtension: (√† r√©parer)");
        
        console.log("\nüöÄ Prochaines √©tapes:");
        console.log("   1. R√©parer DirectListingsExtension");
        console.log("   2. Lier DirectListingsExtension");
        console.log("   3. Tester toutes les fonctionnalit√©s");
        
        console.log("\nüí° Avantages de cette approche:");
        console.log("   - Vous pouvez d√©j√† utiliser les offres sur collection et tokens");
        console.log("   - La marketplace est partiellement fonctionnelle");
        console.log("   - Vous pouvez tester les nouvelles fonctionnalit√©s d'Offers");

    } catch (error) {
        console.error("‚ùå Erreur lors de la liaison:", error.message);
        console.error("   D√©tails:", error);
        process.exit(1);
    }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (error) => {
    console.error("‚ùå Erreur non captur√©e:", error);
    process.exit(1);
});

// Ex√©cuter le script
if (import.meta.url === `file://${process.argv[1]}`) {
    linkOffersOnly().catch((error) => {
        console.error("‚ùå Erreur fatale:", error);
        process.exit(1);
    });
}
