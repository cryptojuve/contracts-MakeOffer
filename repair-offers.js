#!/usr/bin/env node

import { ethers } from "ethers";
import { readFileSync } from "fs";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function repairOffers() {
    console.log("üîß R√âPARATION SP√âCIFIQUE DU CONTRAT OFFERS...");
    console.log("=".repeat(60));

    // Configuration
    const PRIVATE_KEY = process.env.PRIVATE_KEY;
    if (!PRIVATE_KEY) {
        console.error("‚ùå PRIVATE_KEY non d√©finie dans l'environnement");
        console.log("üí° Utilisez: export PRIVATE_KEY=votre_cl√©_priv√©e");
        process.exit(1);
    }

    const rpcUrl = process.env.HYPEREVM_RPC_URL || "https://999.rpc.thirdweb.com";
    const provider = new ethers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

    console.log("üì± D√©ployeur:", wallet.address);
    console.log("üîó RPC:", rpcUrl);

    try {
        // V√©rifier la connexion
        const network = await provider.getNetwork();
        console.log("üåê R√©seau:", network.name || "HyperEVM");
        console.log("üîó Chain ID:", network.chainId);

        // V√©rifier le solde
        const balance = await provider.getBalance(wallet.address);
        console.log("üí∞ Solde:", ethers.formatEther(balance), "HYPE");

        if (balance < ethers.parseEther("0.00001")) {
            console.error("‚ùå Solde insuffisant pour les transactions de r√©paration");
            process.exit(1);
        }

        // Adresses des contrats
        const offersAddress = "0x97541DFbe88427F02400F0Efb7d0679C32C76d0e";
        const marketplaceAddress = "0xeEf91cD030F98Ce0330F050A446e3E883604D755";

        console.log("\nüìç Contrat √† r√©parer:");
        console.log("üéØ Offers:", offersAddress);

        // Charger l'ABI
        console.log("\nüìã Chargement de l'ABI...");

        const OffersABI = JSON.parse(
            readFileSync(join(__dirname, "./artifacts_forge/Offers.sol/Offers.json"), "utf8")
        ).abi;

        // Cr√©er l'instance du contrat
        const offers = new ethers.Contract(offersAddress, OffersABI, wallet);

        // ===== PHASE 1: DIAGNOSTIC APPROFONDI OFFERS =====
        console.log("\nüîç PHASE 1: DIAGNOSTIC APPROFONDI OFFERS");
        console.log("=".repeat(50));

        // V√©rifier le code du contrat
        const offersCode = await provider.getCode(offersAddress);
        if (offersCode === "0x") {
            console.error("‚ùå Offers n'a pas de code (contrat non d√©ploy√©)");
            process.exit(1);
        }
        console.log("‚úÖ Offers a du code d√©ploy√©");

        // V√©rifier la longueur du code
        const codeLength = offersCode.length;
        console.log("üìè Longueur du code:", codeLength, "caract√®res");

        if (codeLength < 100) {
            console.warn("‚ö†Ô∏è  Code tr√®s court - possible probl√®me de d√©ploiement");
        }

        // ===== PHASE 2: TEST DES FONCTIONS CRITIQUES =====
        console.log("\nüß™ PHASE 2: TEST DES FONCTIONS CRITIQUES");
        console.log("=".repeat(50));

        // Test 1: DEFAULT_ADMIN_ROLE
        try {
            const adminRole = await offers.DEFAULT_ADMIN_ROLE();
            console.log("‚úÖ DEFAULT_ADMIN_ROLE:", adminRole);
        } catch (error) {
            console.error("‚ùå Erreur DEFAULT_ADMIN_ROLE:", error.message);
        }

        // Test 2: V√©rifier les permissions
        try {
            const hasAdminRole = await offers.hasRole(await offers.DEFAULT_ADMIN_ROLE(), wallet.address);
            console.log("‚úÖ D√©ployeur a DEFAULT_ADMIN_ROLE:", hasAdminRole);
        } catch (error) {
            console.error("‚ùå Erreur v√©rification admin:", error.message);
        }

        // Test 3: totalOffers (fonction probl√©matique)
        try {
            const totalOffers = await offers.totalOffers();
            console.log("‚úÖ totalOffers:", totalOffers.toString());
        } catch (error) {
            console.error("‚ùå totalOffers √©choue:", error.message);

            // Analyser l'erreur plus en d√©tail
            if (error.code === 'CALL_EXCEPTION') {
                console.log("üí° CALL_EXCEPTION - Le contrat s'arr√™te lors de l'ex√©cution");

                // Essayer de r√©cup√©rer plus d'informations sur l'erreur
                try {
                    const tx = {
                        to: offersAddress,
                        data: "0xa9fd8ed1", // totalOffers() selector
                        from: wallet.address
                    };

                    const result = await provider.call(tx);
                    console.log("‚úÖ Appel direct r√©ussi:", result);
                } catch (directError) {
                    console.log("‚ùå Appel direct √©choue aussi:", directError.message);
                }
            }
        }

        // Test 4: Autres fonctions de base
        try {
            const offerorRole = await offers.OFFEROR_ROLE();
            console.log("‚úÖ OFFEROR_ROLE:", offerorRole);
        } catch (error) {
            console.error("‚ùå Erreur OFFEROR_ROLE:", error.message);
        }

        try {
            const managerRole = await offers.MANAGER_ROLE();
            console.log("‚úÖ MANAGER_ROLE:", managerRole);
        } catch (error) {
            console.error("‚ùå Erreur MANAGER_ROLE:", error.message);
        }

        // ===== PHASE 3: TENTATIVE DE R√âPARATION =====
        console.log("\nüîß PHASE 3: TENTATIVE DE R√âPARATION");
        console.log("=".repeat(50));

        // Essayer d'appeler des fonctions qui pourraient "r√©veiller" le contrat
        console.log("\nüß™ Tentative de r√©veil du contrat...");

        try {
            // Essayer d'appeler une fonction simple
            const isPaused = await offers.paused();
            console.log("‚úÖ paused():", isPaused);
        } catch (error) {
            console.log("‚ùå paused() √©choue:", error.message);
        }

        try {
            // Essayer d'appeler une fonction de r√¥le
            const hasOfferorRole = await offers.hasRole(await offers.OFFEROR_ROLE(), wallet.address);
            console.log("‚úÖ hasOfferorRole:", hasOfferorRole);
        } catch (error) {
            console.log("‚ùå hasOfferorRole √©choue:", error.message);
        }

        // ===== PHASE 4: DIAGNOSTIC DU PROBL√àME =====
        console.log("\nüîç PHASE 4: DIAGNOSTIC DU PROBL√àME");
        console.log("=".repeat(50));

        // Analyser le code du contrat pour identifier le probl√®me
        console.log("\nüìä Analyse du code du contrat...");

        // V√©rifier si le contrat a des fonctions de base
        const basicFunctions = [
            "0x8da5cb5b", // owner()
            "0x18160ddd", // totalSupply() (si ERC20)
            "0x01ffc9a7", // supportsInterface()
            "0x3659cfe6"  // implementation() (si proxy)
        ];

        for (const selector of basicFunctions) {
            try {
                const tx = {
                    to: offersAddress,
                    data: selector,
                    from: wallet.address
                };

                const result = await provider.call(tx);
                console.log(`‚úÖ ${selector}: ${result}`);
            } catch (error) {
                console.log(`‚ùå ${selector}: √âchoue`);
            }
        }

        // ===== PHASE 5: RECOMMANDATIONS =====
        console.log("\nüí° PHASE 5: RECOMMANDATIONS");
        console.log("=".repeat(50));

        console.log("\nüîç DIAGNOSTIC FINAL:");
        console.log("   - Le contrat Offers a du code d√©ploy√©");
        console.log("   - Mais certaines fonctions critiques √©chouent");
        console.log("   - Le probl√®me semble √™tre dans l'impl√©mentation");

        console.log("\nüõ†Ô∏è  SOLUTIONS RECOMMAND√âES:");
        console.log("   1. üî¥ RED√âPLOYER le contrat Offers");
        console.log("   2. üîç V√©rifier les param√®tres du constructeur");
        console.log("   3. ‚úÖ S'assurer que le d√©ploiement est complet");

        console.log("\nüöÄ PLAN D'ACTION:");
        console.log("   1. Sauvegarder l'adresse actuelle");
        console.log("   2. Red√©ployer Offers avec les bons param√®tres");
        console.log("   3. Mettre √† jour les r√©f√©rences");
        console.log("   4. Relancer link-extensions.js");

        console.log("\n‚ö†Ô∏è  ATTENTION:");
        console.log("   - Le red√©ploiement changera l'adresse du contrat");
        console.log("   - Toutes les r√©f√©rences devront √™tre mises √† jour");
        console.log("   - Les donn√©es existantes seront perdues");

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©paration d'Offers:", error.message);
        console.error("   D√©tails:", error);
        process.exit(1);
    }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (error) => {
    console.error("‚ùå Erreur non captur√©e:", error);
    process.exit(1);
});

// Ex√©cuter le script
if (import.meta.url === `file://${process.argv[1]}`) {
    repairOffers().catch((error) => {
        console.error("‚ùå Erreur fatale:", error);
        process.exit(1);
    });
}
