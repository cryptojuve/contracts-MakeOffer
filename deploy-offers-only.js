#!/usr/bin/env node

import { ethers } from "ethers";
import { readFileSync } from "fs";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function deployOffersOnly() {
    console.log("üöÄ D√âPLOIEMENT UNIQUEMENT DU CONTRAT OFFERS...");
    console.log("=".repeat(60));

    // Configuration
    const PRIVATE_KEY = process.env.PRIVATE_KEY;
    if (!PRIVATE_KEY) {
        console.error("‚ùå PRIVATE_KEY non d√©finie dans l'environnement");
        console.log("üí° Utilisez: export PRIVATE_KEY=votre_cl√©_priv√©e");
        process.exit(1);
    }

    const rpcUrl = process.env.HYPEREVM_RPC_URL || "https://999.rpc.thirdweb.com";
    const provider = new ethers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

    console.log("üì± D√©ployeur:", wallet.address);
    console.log("üîó RPC:", rpcUrl);

    try {
        // V√©rifier la connexion
        const network = await provider.getNetwork();
        console.log("üåê R√©seau:", network.name || "HyperEVM");
        console.log("üîó Chain ID:", network.chainId);

        // V√©rifier le solde
        const balance = await provider.getBalance(wallet.address);
        console.log("üí∞ Solde:", ethers.formatEther(balance), "HYPE");

        if (balance < ethers.parseEther("0.00001")) {
            console.error("‚ùå Solde insuffisant pour le d√©ploiement");
            process.exit(1);
        }

        // Charger le bytecode et l'ABI du contrat Offers
        console.log("\nüìã Chargement du contrat Offers...");

        const OffersArtifact = JSON.parse(
            readFileSync(join(__dirname, "./artifacts_forge/Offers.sol/Offers.json"), "utf8")
        );

        const OffersABI = OffersArtifact.abi;
        const OffersBytecode = OffersArtifact.bytecode.object;

        console.log("‚úÖ ABI charg√©");
        console.log("‚úÖ Bytecode charg√©");

        // ===== PHASE 1: D√âPLOIEMENT =====
        console.log("\nüöÄ PHASE 1: D√âPLOIEMENT DU CONTRAT OFFERS");
        console.log("=".repeat(50));

        console.log("\nüèóÔ∏è  D√©ploiement en cours...");

        // Cr√©er la factory du contrat
        const OffersFactory = new ethers.ContractFactory(OffersABI, OffersBytecode, wallet);

        // D√©ployer avec les param√®tres du constructeur
        // Le constructeur prend (address _admin)
        console.log("üìù D√©ploiement avec admin:", wallet.address);

        const offers = await OffersFactory.deploy(wallet.address);

        console.log("‚è≥ D√©ploiement en cours...");
        console.log("   Hash:", offers.deploymentTransaction().hash);

        // Attendre la confirmation
        const receipt = await offers.waitForDeployment();
        const offersAddress = await offers.getAddress();

        console.log("‚úÖ Contrat Offers d√©ploy√© avec succ√®s !");
        console.log("   Adresse:", offersAddress);

        // R√©cup√©rer le num√©ro de block de mani√®re s√©curis√©e
        try {
            const blockNumber = receipt.blockNumber;
            if (blockNumber) {
                console.log("   Block:", blockNumber);
            } else {
                console.log("   Block: En cours de confirmation");
            }
        } catch (error) {
            console.log("   Block: En cours de confirmation");
        }

        // R√©cup√©rer le gas utilis√© de mani√®re s√©curis√©e
        try {
            const gasUsed = receipt.gasUsed;
            if (gasUsed) {
                console.log("   Gas utilis√©:", gasUsed.toString());
            } else {
                console.log("   Gas utilis√©: En cours de calcul");
            }
        } catch (error) {
            console.log("   Gas utilis√©: En cours de calcul");
        }

        // ===== PHASE 2: V√âRIFICATION =====
        console.log("\n‚úÖ PHASE 2: V√âRIFICATION DU CONTRAT D√âPLOY√â");
        console.log("=".repeat(50));

        // V√©rifier le code du contrat
        const offersCode = await provider.getCode(offersAddress);
        if (offersCode === "0x") {
            console.error("‚ùå Le contrat n'a pas de code");
            process.exit(1);
        }
        console.log("‚úÖ Contrat a du code d√©ploy√©");

        // Cr√©er l'instance du contrat d√©ploy√©
        const deployedOffers = new ethers.Contract(offersAddress, OffersABI, wallet);

        // Tester les fonctions critiques
        console.log("\nüß™ Test des fonctions critiques...");

        try {
            const adminRole = await deployedOffers.DEFAULT_ADMIN_ROLE();
            console.log("‚úÖ DEFAULT_ADMIN_ROLE:", adminRole);
        } catch (error) {
            console.error("‚ùå Erreur DEFAULT_ADMIN_ROLE:", error.message);
        }

        try {
            const hasAdminRole = await deployedOffers.hasRole(await deployedOffers.DEFAULT_ADMIN_ROLE(), wallet.address);
            console.log("‚úÖ D√©ployeur a DEFAULT_ADMIN_ROLE:", hasAdminRole);
        } catch (error) {
            console.error("‚ùå Erreur v√©rification admin:", error.message);
        }

        try {
            const totalOffers = await deployedOffers.totalOffers();
            console.log("‚úÖ totalOffers:", totalOffers.toString());
        } catch (error) {
            console.error("‚ùå totalOffers √©choue:", error.message);
        }

        try {
            const offerorRole = await deployedOffers.OFFEROR_ROLE();
            console.log("‚úÖ OFFEROR_ROLE:", offerorRole);
        } catch (error) {
            console.error("‚ùå Erreur OFFEROR_ROLE:", error.message);
        }

        try {
            const managerRole = await deployedOffers.MANAGER_ROLE();
            console.log("‚úÖ MANAGER_ROLE:", managerRole);
        } catch (error) {
            console.error("‚ùå Erreur MANAGER_ROLE:", error.message);
        }

        // ===== PHASE 3: R√âSUM√â FINAL =====
        console.log("\nüéâ R√âSUM√â DU D√âPLOIEMENT");
        console.log("=".repeat(50));

        console.log("‚úÖ Contrat d√©ploy√© avec succ√®s !");
        console.log("üìç Adresse du contrat Offers:", offersAddress);
        console.log("üîó R√©seau:", network.name || "HyperEVM");
        console.log("üîó Chain ID:", network.chainId);
        console.log("üì± Admin:", wallet.address);

        console.log("\nüöÄ Prochaines √©tapes:");
        console.log("   1. Mettre √† jour link-extensions.js avec la nouvelle adresse");
        console.log("   2. Relancer le script de liaison des extensions");
        console.log("   3. Tester les nouvelles fonctionnalit√©s (offres sur collection + tokens)");

        console.log("\nüíæ Informations de sauvegarde:");
        console.log("   Ancienne adresse Offers: 0x97541DFbe88427F02400F0Efb7d0679C32C76d0e");
        console.log("   Nouvelle adresse Offers:", offersAddress);
        console.log("   MarketplaceV3: 0xeEf91cD030F98Ce0330F050A446e3E883604D755");
        console.log("   DirectListingsExtension: 0x0D180f0029679BEDe5d9516f3b089BfD8d9cfd32");

    } catch (error) {
        console.error("‚ùå Erreur lors du d√©ploiement:", error.message);
        console.error("   D√©tails:", error);
        process.exit(1);
    }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (error) => {
    console.error("‚ùå Erreur non captur√©e:", error);
    process.exit(1);
});

// Ex√©cuter le script
if (import.meta.url === `file://${process.argv[1]}`) {
    deployOffersOnly().catch((error) => {
        console.error("‚ùå Erreur fatale:", error);
        process.exit(1);
    });
}
